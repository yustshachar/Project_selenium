Index: Shachar_Guy/product_page.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class product_page:\r\n    def __init__(self, driver):\r\n        self.driver=driver\r\n\r\n    def name(self):\r\n        return self.driver.find_element_by_css_selector('[class=\"roboto-regular screen768 ng-binding\"]')\r\n\r\n    def name_text(self):\r\n        name_text = self.name().text\r\n        if len(name_text)>27:\r\n            return name_text[:27]+\"...\"\r\n        return name_text\r\n\r\n    def color(self, name):\r\n        return self.driver.find_element_by_css_selector(f\"[class='']>[title='{name}']\")\r\n\r\n    def choose_color(self, name):\r\n        self.color(name.upper()).click()\r\n\r\n    def quantity(self):\r\n        return self.driver.find_element_by_name(\"quantity\")\r\n\r\n    def save_to_cart(self):\r\n        return self.driver.find_element_by_name(\"save_to_cart\")\r\n\r\n    def save_to_cart_click(self):\r\n        self.save_to_cart().click()\r\n\r\n    def back_to_home_page(self):\r\n        return self.driver.find_element_by_css_selector(\"[id='Layer_1'][version='1.1']\")\r\n\r\n    def back_to_home_page_click(self):\r\n        self.back_to_home_page().click()\r\n\r\n    def choose_quantity(self, count):\r\n        for i in range(1, count):\r\n            self.driver.find_element_by_class_name(\"plus\").click()\r\n\r\n    def minus_quantity(self, count):\r\n        for i in range(0, count):\r\n            self.driver.find_element_by_class_name(\"minus\").click()\r\n\r\n    def icon_x_cart(self):\r\n        return self.driver.find_elements_by_css_selector(\"[class='removeProduct iconCss iconX']\")\r\n\r\n    def icon_x_cart_click(self):\r\n        self.icon_x_cart()[-1].click()\r\n\r\n    def cart(self):\r\n        return self.driver.find_element_by_id(\"menuCart\")\r\n\r\n    def cart_click(self):\r\n        self.cart().click()\r\n\r\n    def price_product(self):\r\n        price_str = self.driver.find_element_by_css_selector(\"#Description>h2[class='roboto-thin screen768 ng-binding']\").text[1:]\r\n        return float(price_str.replace(\",\", \"\"))\r\n\r\n    def page_bar(self):\r\n        return self.driver.find_elements_by_css_selector(\"nav>a\")\r\n\r\n    def checkout_popup(self):\r\n        return self.driver.find_element_by_id(\"checkOutPopUp\")\r\n\r\n    def checkout_popup_click(self):\r\n        self.checkout_popup().click()\r\n\r\n    def prices_cart_popup(self):\r\n        return self.driver.find_elements_by_css_selector('p[class=\"price roboto-regular ng-binding\"]')\r\n\r\n    def prices_cart_popup_text(self):\r\n        prices = self.prices_cart_popup()\r\n        prices_text = []\r\n        for i in prices:\r\n            price = i.text[1:]\r\n            p = float(price.replace(\",\", \"\"))\r\n            prices_text.append(p)\r\n        return prices_text\r\n\r\n    def names_cart_popup(self):\r\n        return self.driver.find_elements_by_css_selector('h3[class=\"ng-binding\"]')\r\n\r\n    def names_cart_popup_text(self):\r\n        names = self.names_cart_popup()\r\n        names_text = []\r\n        for i in names:\r\n            names_text.append(i.text)\r\n        return names_text\r\n\r\n    def quantities_cart_popup(self):\r\n        quantities = self.driver.find_elements_by_css_selector(\"a>label[class='ng-binding']\")\r\n        del quantities[1::2]\r\n        return quantities\r\n\r\n    def quantities_cart_popup_text(self):\r\n        quantities = self.quantities_cart_popup()\r\n        quantities_text = []\r\n        for i in quantities:\r\n            quantity = i.text[5:]\r\n            quantities_text.append(int(quantity))\r\n        return quantities_text\r\n\r\n    def colors_cart_popup(self):\r\n        return self.driver.find_elements_by_css_selector(\"label>span[class='ng-binding']\")\r\n\r\n    def colors_cart_popup_text(self):\r\n        colors = self.colors_cart_popup()\r\n        colors_text = []\r\n        for i in colors:\r\n            colors_text.append(i.text)\r\n        return colors_text
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Shachar_Guy/product_page.py b/Shachar_Guy/product_page.py
--- a/Shachar_Guy/product_page.py	(revision 0ae2ca2a301bd6e84dd6485251e055c47217321a)
+++ b/Shachar_Guy/product_page.py	(date 1624869224850)
@@ -36,9 +36,9 @@
         for i in range(1, count):
             self.driver.find_element_by_class_name("plus").click()
 
-    def minus_quantity(self, count):
-        for i in range(0, count):
-            self.driver.find_element_by_class_name("minus").click()
+    def change_quantity(self, quantity):
+        self.driver.find_element_by_css_selector("[name = 'quantity']").click()
+        self.driver.find_element_by_css_selector("[name = 'quantity']").send_keys(quantity)
 
     def icon_x_cart(self):
         return self.driver.find_elements_by_css_selector("[class='removeProduct iconCss iconX']")
Index: Shachar_Guy/test_main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from unittest import TestCase\r\nfrom openpyxl import *\r\nfrom selenium import webdriver\r\nfrom time import sleep\r\nfrom selenium.webdriver.support.ui import WebDriverWait\r\nfrom selenium.webdriver.support import expected_conditions as EC\r\nfrom selenium.webdriver.common.by import By\r\nfrom Shachar_Guy.home_page import home_page\r\nfrom Shachar_Guy.category_page import category_page\r\nfrom Shachar_Guy.product_page import product_page\r\nfrom Shachar_Guy.cart_page import cart_page\r\nfrom Shachar_Guy.login_in_order_payment_page import login_in_order_payment_page\r\nfrom Shachar_Guy.payment_page import payment_page\r\nfrom Shachar_Guy.my_orders_page import my_orders_page\r\n\r\nclass test_main(TestCase):\r\n    def setUp(self):\r\n        self.driver = webdriver.Chrome(executable_path=r\"C:\\selenium\\chromedriver.exe\")\r\n        self.driver.implicitly_wait(20)\r\n        self.link_web = \"https://www.advantageonlineshopping.com/#/\"\r\n        self.driver.get(self.link_web)\r\n        self.driver.maximize_window()\r\n        self.driver.refresh()\r\n        self.driver.refresh()\r\n        self.driver.maximize_window()\r\n        self.wait = WebDriverWait(self.driver, 10)\r\n        self.home_page=home_page(self.driver)\r\n        self.category_page=category_page(self.driver)\r\n        self.product_page=product_page(self.driver)\r\n        self.cart_page=cart_page(self.driver)\r\n        self.login_in_order_payment_page=login_in_order_payment_page(self.driver)\r\n        self.payment_page = payment_page(self.driver)\r\n        self.my_orders_page = my_orders_page(self.driver)\r\n        self.wb = load_workbook(\"ExcelTesting.xlsx\")\r\n        self.xl = self.wb.active\r\n\r\n    def test_1(self):\r\n        try:\r\n            # למשתנים ייכנסו הנתונים מהאקסל\r\n            cat1 = self.xl[\"C2\"].value\r\n            prod1 = self.xl[\"C3\"].value\r\n            color1 = self.xl[\"C4\"].value\r\n            count1= self.xl[\"C5\"].value\r\n            cat2 = self.xl[\"E2\"].value\r\n            prod2=self.xl[\"E3\"].value\r\n            color2 = self.xl[\"E4\"].value\r\n            count2= self.xl[\"E5\"].value\r\n            # לחיצה לכניסה לעמוד הקטגוריה\r\n            self.home_page.click_category(cat1)\r\n            # לחיצה לכניסה לעמוד המוצר\r\n            self.category_page.click_product_id(prod1)\r\n            # בחירת צבע\r\n            self.product_page.choose_color(color1)\r\n            # בחירת כמות\r\n            self.product_page.choose_quantity(count1)\r\n            # הכנסה לעגלה\r\n            self.product_page.save_to_cart_click()\r\n            # חזרה לעמוד הראשי\r\n            self.product_page.back_to_home_page_click()\r\n            # לחיצה לכניסה לעמוד הקטגוריה\r\n            self.home_page.click_category(cat2)\r\n            # לחיצה לכניסה לעמוד המוצר\r\n            self.category_page.click_product_id(prod2)\r\n            # בחירת צבע\r\n            self.product_page.choose_color(color2)\r\n            # בחירת כמות\r\n            self.product_page.choose_quantity(count2)\r\n            # הכנסה לעגלה\r\n            self.product_page.save_to_cart_click()\r\n            # בדיקה האם חיבור הכמות שווה לכמות המופיעה\r\n            self.assertEqual(count1 + count2, int(self.driver.find_element_by_css_selector(\"#shoppingCartLink>span\").text))\r\n            self.xl[\"A6\"] = \"passed\"\r\n        except:\r\n            self.xl[\"A6\"] = \"fails\"\r\n\r\n    def test_2(self):\r\n        # למשתנים ייכנסו הנתונים מהאקסל\r\n        cat1 = self.xl[\"C9\"].value\r\n        prod1 = self.xl[\"C10\"].value\r\n        color1 = self.xl[\"C11\"].value\r\n        quantity1 = self.xl[\"C12\"].value\r\n        cat2 = self.xl[\"E9\"].value\r\n        prod2 = self.xl[\"E10\"].value\r\n        color2 = self.xl[\"E11\"].value\r\n        quantity2 = self.xl[\"E12\"].value\r\n        cat3 = self.xl[\"G9\"].value\r\n        prod3 = self.xl[\"G10\"].value\r\n        color3 = self.xl[\"G11\"].value\r\n        quantity3 = self.xl[\"G12\"].value\r\n\r\n        # מוצר ראשון\r\n        # לחיצה לכניסה לעמוד הקטגוריה\r\n        self.home_page.click_category(cat1)\r\n        # לחיצה לכניסה לעמוד המוצר\r\n        self.category_page.click_product_id(prod1)\r\n        # בחירת צבע\r\n        self.product_page.choose_color(color1)\r\n        # בחירת כמות\r\n        self.product_page.choose_quantity(quantity1)\r\n        # אחסון השם\r\n        name1 = self.product_page.name_text()\r\n        # אחסון מחיר, אחרי הכפלה בכמות\r\n        price1 = round(quantity1 * self.product_page.price_product(),2)\r\n        # הכנסה לעגלה\r\n        self.product_page.save_to_cart_click()\r\n\r\n        # חזרה לעמוד הראשי\r\n        self.product_page.back_to_home_page_click()\r\n\r\n        # מוצר שני\r\n        # לחיצה לכניסה לעמוד הקטגוריה\r\n        self.home_page.click_category(cat2)\r\n        # לחיצה לכניסה לעמוד המוצר\r\n        self.category_page.click_product_id(prod2)\r\n        # בחירת צבע\r\n        self.product_page.choose_color(color2)\r\n        # בחירת כמות\r\n        self.product_page.choose_quantity(quantity2)\r\n        # אחסון השם\r\n        name2 = self.product_page.name_text()\r\n        # אחסון מחיר, אחרי הכפלה בכמות\r\n        price2 = round(quantity2 * self.product_page.price_product(), 2)\r\n        # הכנסה לעגלה\r\n        self.product_page.save_to_cart_click()\r\n\r\n        # חזרה לעמוד הראשי\r\n        self.product_page.back_to_home_page_click()\r\n\r\n        # מוצר שלישי\r\n        # לחיצה לכניסה לעמוד הקטגוריה\r\n        self.home_page.click_category(cat3)\r\n        # לחיצה לכניסה לעמוד המוצר\r\n        self.category_page.click_product_id(prod3)\r\n        # בחירת צבע\r\n        self.product_page.choose_color(color3)\r\n        # בחירת כמות\r\n        self.product_page.choose_quantity(quantity3)\r\n        # אחסון השם\r\n        name3 = self.product_page.name_text()\r\n        # אחסון מחיר, אחרי הכפלה בכמות\r\n        price3 = round(quantity3 * self.product_page.price_product(), 2)\r\n        # הכנסה לעגלה\r\n        self.product_page.save_to_cart_click()\r\n\r\n        # בודק בהתאמה בחלונית עגלת הקניות את השם, צבע, כמות ומחיר של המוצרים שהתווספו\r\n        # שם\r\n        self.assertEqual([name3,name2,name1],self.product_page.names_cart_popup_text())\r\n        # צבע\r\n        self.assertEqual([color3.upper(),color2.upper(),color1.upper()],self.product_page.colors_cart_popup_text())\r\n        # כמות\r\n        self.assertEqual([quantity3,quantity2,quantity1],self.product_page.quantities_cart_popup_text())\r\n        #מחיר\r\n        self.assertEqual([price3,price2,price1],self.product_page.prices_cart_popup_text())\r\n\r\n    def test_3(self):\r\n        try:\r\n            # למשתנים ייכנסו הנתונים מהאקסל\r\n            cat1 = self.xl[\"C16\"].value\r\n            prod1 = self.xl[\"C17\"].value\r\n            cat2 = self.xl[\"E16\"].value\r\n            prod2 = self.xl[\"E17\"].value\r\n            # לחיצה לכניסה לעמוד הקטגוריה\r\n            self.home_page.click_category(cat1)\r\n            # לחיצה לכניסה לעמוד המוצר\r\n            self.category_page.click_product_id(prod1)\r\n            # הכנסה לעגלה\r\n            self.product_page.save_to_cart_click()\r\n            # חזרה לעמוד הראשי\r\n            self.product_page.back_to_home_page_click()\r\n            # לחיצה לכניסה לעמוד הקטגוריה\r\n            self.home_page.click_category(cat2)\r\n            # לחיצה לכניסה לעמוד המוצר\r\n            self.category_page.click_product_id(prod2)\r\n            # הכנסה לעגלה\r\n            self.product_page.save_to_cart_click()\r\n            # בודק את כמות המוצרים בעגלה\r\n            before = len(self.product_page.icon_x_cart())\r\n            # מוחק את המוצר האחרון שהצטרף לעגלת קניות\r\n            self.product_page.icon_x_cart_click()\r\n            # בודק שוב את כמות הפריטים בעגלה\r\n            after = len(self.product_page.icon_x_cart())\r\n            # בודק שהכמות ירדה ב1\r\n            self.assertEqual(before, after+1)\r\n            self.xl[\"A18\"] = \"passed\"\r\n        except:\r\n            self.xl[\"A18\"] = \"fails\"\r\n\r\n    def test_4(self):\r\n        # למשתנים ייכנסו הנתונים מהאקסל\r\n        cat = self.xl[\"C16\"].value\r\n        prod = self.xl[\"C16\"].value\r\n        color = self.xl[\"C16\"].value\r\n        quantity = self.xl[\"C16\"].value\r\n\r\n        # לחיצה לכניסה לעמוד הקטגוריה\r\n        self.home_page.click_category(cat)\r\n        # לחיצה לכניסה לעמוד המוצר\r\n        self.category_page.click_product_id(prod)\r\n        # בחירת צבע\r\n        self.product_page.choose_color(color)\r\n        # בחירת כמות\r\n        self.product_page.choose_quantity(quantity)\r\n        # הכנסה לעגלה\r\n        self.product_page.save_to_cart_click()\r\n\r\n        # מעבר לעמוד עגלת הקניות\r\n        self.product_page.cart_click()\r\n\r\n        # בדיקת הופעת הטקסט Shopping Cart למעלה משמאל\r\n        self.assertIn(\"SHOPPING CART\",self.cart_page.nav_current_location().text)\r\n\r\n    def test_5(self):\r\n        try:\r\n            # למשתנים ייכנסו הנתונים מהאקסל\r\n            cat1 = self.xl[\"C26\"].value\r\n            prod1 = self.xl[\"C27\"].value\r\n            count1 = self.xl[\"C28\"].value\r\n            cat2 = self.xl[\"E26\"].value\r\n            prod2 = self.xl[\"E27\"].value\r\n            count2 = self.xl[\"E28\"].value\r\n            cat3 = self.xl[\"G26\"].value\r\n            prod3 = self.xl[\"G27\"].value\r\n            count3 = self.xl[\"G28\"].value\r\n            # לחיצה לכניסה לעמוד הקטגוריה\r\n            self.home_page.click_category(cat1)\r\n            # לחיצה לכניסה לעמוד המוצר\r\n            self.category_page.click_product_id(prod1)\r\n            # הכנסת מחיר המוצר כפול הכמות למשתנה\r\n            price_p1 = self.product_page.price_product() * count1\r\n            # בחירת כמות\r\n            self.product_page.choose_quantity(count1)\r\n            # הכנסה לעגלה\r\n            self.product_page.save_to_cart_click()\r\n            # חזרה לעמוד הראשי\r\n            self.product_page.back_to_home_page_click()\r\n            # לחיצה לכניסה לעמוד הקטגוריה\r\n            self.home_page.click_category(cat2)\r\n            # לחיצה לכניסה לעמוד המוצר\r\n            self.category_page.click_product_id(prod2)\r\n            # הכנסת מחיר המוצר כפול הכמות למשתנה\r\n            price_p2 = self.product_page.price_product() * count2\r\n            # בחירת כמות\r\n            self.product_page.choose_quantity(count2)\r\n            # הכנסה לעגלה\r\n            self.product_page.save_to_cart_click()\r\n            # חזרה לעמוד הראשי\r\n            self.product_page.back_to_home_page_click()\r\n            # לחיצה לכניסה לעמוד הקטגוריה\r\n            self.home_page.click_category(cat3)\r\n            # לחיצה לכניסה לעמוד המוצר\r\n            self.category_page.click_product_id(prod3)\r\n            # הכנסת מחיר המוצר כפול הכמות למשתנה\r\n            price_p3 = self.product_page.price_product() * count3\r\n            # בחירת כמות\r\n            self.product_page.choose_quantity(count3)\r\n            # הכנסה לעגלה\r\n            self.product_page.save_to_cart_click()\r\n            # מעבר לעמוד עגלת הקניות\r\n            self.product_page.cart_click()\r\n            # בדיקה אם המחיר הסופי שווה למחירי המוצרים כפול הכמויות (עם עיגול של 2 ספרות אחרי הנקודה)\r\n            self.assertEqual(self.cart_page.total(), round(price_p1+price_p2+price_p3,2))\r\n\r\n            # הדפסת עגלת הקניות\r\n            for i in range(3):\r\n                print(self.cart_page.name_products()[i].text, end=\"\\t\")\r\n                print(self.cart_page.quantity_products()[i].text, end=\"\\t\")\r\n                print(self.cart_page.price_products()[i].text, end=\"\\t\")\r\n                print()\r\n\r\n            self.xl[\"A29\"] = \"passed\"\r\n        except:\r\n            self.xl[\"A29\"] = \"fails\"\r\n\r\n\r\n\r\n    def test_6(self):\r\n        # למשתנים ייכנסו הנתונים מהאקסל\r\n        cat1 = \"speakers\"\r\n        prod1 = \"20\"\r\n        color1 = \"GRAY\"\r\n        quantity1 = 5\r\n        cat2 = \"tablets\"\r\n        prod2 = \"17\"\r\n        color2 = \"BLACK\"\r\n        quantity2 = 8\r\n\r\n        # מוצר ראשון\r\n        # לחיצה לכניסה לעמוד הקטגוריה\r\n        self.home_page.click_category(cat1)\r\n        # לחיצה לכניסה לעמוד המוצר\r\n        self.category_page.click_product_id(prod1)\r\n        # בחירת צבע\r\n        self.product_page.choose_color(color1)\r\n        # בחירת כמות\r\n        self.product_page.choose_quantity(quantity1)\r\n        # הכנסה לעגלה\r\n        self.product_page.save_to_cart_click()\r\n\r\n        # חזרה לעמוד הראשי\r\n        self.product_page.back_to_home_page_click()\r\n\r\n        # מוצר שני\r\n        # לחיצה לכניסה לעמוד הקטגוריה\r\n        self.home_page.click_category(cat2)\r\n        # לחיצה לכניסה לעמוד המוצר\r\n        self.category_page.click_product_id(prod2)\r\n        # בחירת צבע\r\n        self.product_page.choose_color(color2)\r\n        # בחירת כמות\r\n        self.product_page.choose_quantity(quantity2)\r\n        # הכנסה לעגלה\r\n        self.product_page.save_to_cart_click()\r\n\r\n        # מעבר לעמוד עגלת הקניות\r\n        self.product_page.cart_click()\r\n\r\n        # מוצר 2 - הראשון בטבלת עגלת הקניות\r\n        # לחיצה על edit מוצר 2\r\n        self.cart_page.edit_products()[0].click()\r\n        # הורדת הכמות ב2\r\n        self.product_page.minus_quantity(2)\r\n        # שמירה בעגלה ומעבר לעמוד עגלת הקניות\r\n        self.product_page.save_to_cart_click()\r\n\r\n        # בדיקת הכמות החדשה - מוצר 2\r\n        self.assertEqual(str(quantity2-2),self.cart_page.quantity_products()[0].text)\r\n\r\n        # מוצר 1 - השני בטבלת עגלת הקניות\r\n        # לחיצה על edit מוצר 1\r\n        self.cart_page.edit_products()[1].click()\r\n        # הורדת הכמות ב2\r\n        self.product_page.minus_quantity(2)\r\n        # שמירה בעגלה ומעבר לעמוד עגלת הקניות\r\n        self.product_page.save_to_cart_click()\r\n\r\n        # בדיקת הכמות החדשה - מוצר 1\r\n        self.assertEqual(str(quantity1 - 2), self.cart_page.quantity_products()[1].text)\r\n\r\n    def test_7(self):\r\n        try:\r\n            cat = self.xl[\"C39\"].value\r\n            prod = self.xl[\"C40\"].value\r\n            # לחיצה לכניסה לעמוד הקטגוריה\r\n            self.home_page.click_category(cat)\r\n            # לחיצה לכניסה לעמוד המוצר\r\n            self.category_page.click_product_id(prod)\r\n            # הכנסה לעגלה\r\n            self.product_page.save_to_cart_click()\r\n            # חזרה לעמוד הקודם\r\n            self.driver.back()\r\n            # בודק אם הכותרת היא טאבלט\r\n            self.assertEqual(self.category_page.text_title_page(), \"TABLETS\")\r\n            # חזרה לעמוד הקודם\r\n            self.driver.back()\r\n            # בודק שהכתובת הנוכחית שווה להכתובת של עמוד הבית\r\n            self.assertEqual(self.driver.current_url, self.link_web)\r\n            self.xl[\"A41\"] = \"passed\"\r\n        except:\r\n            self.xl[\"A41\"] = \"fails\"\r\n\r\n    def test_8(self):\r\n        pass\r\n\r\n    def test_9(self):\r\n        try:\r\n            username = self.xl[\"E50\"].value # חייבים משתמש שעוד לא הכניס פרטי אשראי!\r\n            password = self.xl[\"E51\"].value\r\n            # למשתנים ייכנסו הנתונים מהאקסל\r\n            cat = self.xl[\"C50\"].value\r\n            prod = self.xl[\"C51\"].value\r\n            card_num = self.xl[\"G50\"].value\r\n            cvv = self.xl[\"G51\"].value  # באג! הוא מתעלם מהתו הראשון ששמים גם ידנית\r\n            month = self.xl[\"G52\"].value\r\n            year = self.xl[\"G53\"].value\r\n            card_name = self.xl[\"G54\"].value\r\n            # לחיצה לכניסה לעמוד הקטגוריה\r\n            self.home_page.click_category(cat)\r\n            # לחיצה לכניסה לעמוד המוצר\r\n            self.category_page.click_product_id(prod)\r\n            # הכנסה לעגלה\r\n            self.product_page.save_to_cart_click()\r\n            # מעבר לעמוד צ'קאאוט\r\n            self.product_page.checkout_popup_click()\r\n            # הכנסת שם משתמש קיים\r\n            self.login_in_order_payment_page.username().send_keys(username)\r\n            # הכנסת סיסמא קיימת\r\n            self.login_in_order_payment_page.password().send_keys(password)\r\n            # לחיצה על התחברות\r\n            self.login_in_order_payment_page.login_button_click()\r\n            # לחיצה על הבא\r\n            self.login_in_order_payment_page.next_button_click()\r\n            # בחירת תשלום בכרטיס אשראי\r\n            self.payment_page.choose_credit_card()\r\n            # הכנסת פרטי אשראי מהמשתנים\r\n            self.payment_page.card_number().send_keys(card_num)\r\n            self.payment_page.cvv().send_keys(cvv)\r\n            self.payment_page.choose_mm(month)\r\n            self.payment_page.choose_yyyy(year)\r\n            self.payment_page.cardholder_name().send_keys(card_name)\r\n            # לחיצה על כפתור התשלום\r\n            self.payment_page.pay_now_button_click()\r\n            # במידה ופרטי האשראי כבר שמורים למשתמש\r\n            # self.driver.find_element_by_id(\"pay_now_btn_MasterCredit\").click()\r\n            # המתנה לעמוד והכנסת מספר הזמנה למשתנה\r\n            self.wait.until(EC.visibility_of_element_located((By.ID, \"orderNumberLabel\")))\r\n            order_number = self.payment_page.order_number()\r\n            # מעבר אל עמוד עגלת הקניות\r\n            self.product_page.cart_click()\r\n            # המתנה לעמוד ובדיקה האם המילה empty קיימת שם\r\n            self.wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, \"[class='roboto-bold ng-scope']\")))\r\n            self.assertIn(\"empty\", self.payment_page.text_if_empty())\r\n            # לחיצה על user\r\n            self.payment_page.open_menu_user()\r\n            # המתנה שחלונית cart תיעלם ולחיצה על my orders\r\n            self.wait.until(EC.invisibility_of_element_located((By.CLASS_NAME, \"emptyCart\")))\r\n            self.payment_page.go_to_my_orders()\r\n            # הכנסת מספר ההזמנה המופיע למשתנה\r\n            num = self.my_orders_page.order_number()\r\n            # בדיקה שאכן מספר ההזמנה שקיבלתי בסיום ההזמנה ומספר ההזמנה שכן שווים\r\n            self.assertEqual(num, order_number)\r\n            self.xl[\"A53\"] = \"passed\"\r\n        except:\r\n            self.xl[\"A53\"] = \"fails\"\r\n\r\n    def test_10(self):\r\n        # למשתנים ייכנסו הנתונים מהאקסל\r\n        username = \"guy586\"\r\n        password = \"Ab123456789\"\r\n\r\n        # התחברות\r\n        # לחיצה על אייקון הuser מצד ימין למעלה באתר\r\n        self.home_page.nav_userIcon_click()\r\n        # מילוי שדה username\r\n        self.home_page.fill_username_field(username)\r\n        # מילוי שדה password\r\n        self.home_page.fill_password_field(password)\r\n        # לחיצה על כפתור SIGN IN\r\n        self.home_page.click_signIn_button()\r\n        # בדיקה שהחיבור הצליח\r\n        self.assertEqual(username,self.home_page.user_miniTitle_text_login())\r\n        self.assertTrue(self.home_page.user_miniTitle().is_displayed())\r\n\r\n        # התנתקות\r\n        # לחיצה על אייקון הuser מצד ימין למעלה באתר\r\n        self.home_page.nav_userIcon_click()\r\n        # לחיצה על כפתור Sign out\r\n        self.home_page.click_signOut_button()\r\n        # בדיקה שההתנתקות הצליחה\r\n        self.assertEqual(\"\",self.home_page.user_miniTitle_text_logout())\r\n        self.assertFalse(self.home_page.user_miniTitle().is_displayed())\r\n\r\n    def tearDown(self):\r\n        self.wb.save(\"ExcelTesting.xlsx\")\r\n        self.product_page.back_to_home_page_click()\r\n        self.driver.close()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Shachar_Guy/test_main.py b/Shachar_Guy/test_main.py
--- a/Shachar_Guy/test_main.py	(revision 0ae2ca2a301bd6e84dd6485251e055c47217321a)
+++ b/Shachar_Guy/test_main.py	(date 1624869224860)
@@ -279,11 +279,12 @@
         prod1 = "20"
         color1 = "GRAY"
         quantity1 = 5
+        new_quantity1 = 9
         cat2 = "tablets"
         prod2 = "17"
         color2 = "BLACK"
         quantity2 = 8
-
+        new_quantity2 = 6
         # מוצר ראשון
         # לחיצה לכניסה לעמוד הקטגוריה
         self.home_page.click_category(cat1)
@@ -318,23 +319,23 @@
         # לחיצה על edit מוצר 2
         self.cart_page.edit_products()[0].click()
         # הורדת הכמות ב2
-        self.product_page.minus_quantity(2)
+        self.product_page.change_quantity(new_quantity1)
         # שמירה בעגלה ומעבר לעמוד עגלת הקניות
         self.product_page.save_to_cart_click()
 
         # בדיקת הכמות החדשה - מוצר 2
-        self.assertEqual(str(quantity2-2),self.cart_page.quantity_products()[0].text)
+        self.assertEqual(str(new_quantity1),self.cart_page.quantity_products()[0].text)
 
         # מוצר 1 - השני בטבלת עגלת הקניות
         # לחיצה על edit מוצר 1
         self.cart_page.edit_products()[1].click()
         # הורדת הכמות ב2
-        self.product_page.minus_quantity(2)
+        self.product_page.change_quantity(new_quantity2)
         # שמירה בעגלה ומעבר לעמוד עגלת הקניות
         self.product_page.save_to_cart_click()
 
         # בדיקת הכמות החדשה - מוצר 1
-        self.assertEqual(str(quantity1 - 2), self.cart_page.quantity_products()[1].text)
+        self.assertEqual(str(new_quantity2), self.cart_page.quantity_products()[1].text)
 
     def test_7(self):
         try:
